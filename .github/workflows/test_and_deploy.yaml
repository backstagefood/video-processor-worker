name: Test and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: video-processor-worker
  EKS_CLUSTER_NAME: video-processor
  EKS_NAMESPACE: worker

jobs:
  test_and_build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.4

      - name: Install dependencies
        run: make install-ci

      - name: Run tests
        run: make test-ci

      - name: Check coverage
        id: coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < 1" | bc -l) )); then
            echo "Coverage ($coverage%) is below the threshold (80%)"
            exit 1
          fi

      - name: Run SonarQube analysis
        if: success()
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.go.tests.reportPaths=coverage.out

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update kubeconfig
        run: echo aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Add Bitnami Helm repository
        run: |
          echo helm repo add bitnami https://charts.bitnami.com/bitnami
          echo helm repo update

      - name: Deploy to EKS
        if: github.ref == 'refs/heads/main'
        run: |
          # Create namespace if it doesn't exist
          echo kubectl create namespace ${{ env.EKS_NAMESPACE }} --dry-run=client -o yaml | echo kubectl apply -f -
          
          # Install/upgrade the Helm chart
          echo helm upgrade --install payments-service ./charts/payments-service \
            --namespace ${{ env.EKS_NAMESPACE }} \
            --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
            --set image.tag=${{ github.sha }} \
            --set mongodb.enabled=true \
            --set kafka.namespace=kafka \
            --wait --timeout 5m